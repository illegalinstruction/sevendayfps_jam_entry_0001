[gd_scene load_steps=5 format=2]

[ext_resource path="res://test-stuff/test_room.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

#------------ GLOBALS ----------------------------------------------------------
const MAX_TO_LOOK_UP_OR_DOWN : float 	= (60.0 * PI / 180.0);
const UP_AND_DOWN_FUDGE : float 		= 0.85;

var APPROOT_fps_cam_mouse_sensitivity : float;

var APPROOT_fps_cam_local_y_angle : float; # in radians
var APPROOT_fps_cam_local_x_angle : float; # in radians

var APPROOT_using_joypad : bool;

var APPROOT_viewport_middle : Vector2;


#-------------------------------------------------------------------------------


# Called when the node enters the scene tree for the first time.
func _ready():
	APPROOT_fps_cam_local_y_angle 		= 0;
	APPROOT_fps_cam_local_x_angle 		= 0;
	APPROOT_fps_cam_mouse_sensitivity	= 0.00125;
	APPROOT_using_joypad				= false;
	set_process(true);
	Input.set_mouse_mode(Input.MOUSE_MODE_CONFINED);
	
	APPROOT_viewport_middle.x = get_viewport().size.x / 2.0;
	APPROOT_viewport_middle.y = get_viewport().size.y / 2.0;
	
	return;
	

#-------------------------------------------------------------------------------


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	# exit on ESC
	if (Input.is_key_pressed(KEY_ESCAPE)):
		get_tree().quit();
		
	if not (APPROOT_using_joypad):	
		#===========================================================================
		#  _ __ ___   ___  _   _ ___  ___ 
		# | '_ ` _ \\ / _ \\| | | / __|/ _ \\
		# | | | | | | (_) | |_| \\__ \\  __/
		# |_| |_| |_|\\___/ \\__,_|___/\\___|
		# TODO: break out into its own method
			
		# get last mouse move
		var curr_mouse_pos : Vector2 = get_viewport().get_mouse_position();
		
		# update our camera angles
		# looking up and down
		APPROOT_fps_cam_local_x_angle += (curr_mouse_pos.y - APPROOT_viewport_middle.y) * APPROOT_fps_cam_mouse_sensitivity * UP_AND_DOWN_FUDGE;
		
		# range checking - don't let player look straight up or down
		if (APPROOT_fps_cam_local_x_angle < -MAX_TO_LOOK_UP_OR_DOWN):
			APPROOT_fps_cam_local_x_angle = -MAX_TO_LOOK_UP_OR_DOWN;

		if (APPROOT_fps_cam_local_x_angle > MAX_TO_LOOK_UP_OR_DOWN):
			APPROOT_fps_cam_local_x_angle = MAX_TO_LOOK_UP_OR_DOWN;
		
		# looking left and right
		APPROOT_fps_cam_local_y_angle += (curr_mouse_pos.x - APPROOT_viewport_middle.x) * APPROOT_fps_cam_mouse_sensitivity;
		APPROOT_fps_cam_local_y_angle = wrapf(APPROOT_fps_cam_local_y_angle, 0, 2.0 * PI);
		
		# reset mouse pos for next frame	
		get_viewport().warp_mouse(APPROOT_viewport_middle);

		#===========================================================================
		#  _                  
		# | | _____ _   _ ___ 
		# | |/ / _ \\ | | / __|
		# |   <  __/ |_| \\__ \\
		# |_|\\_\\___|\\__, |___/
		#           |___/     
		# TODO:
	else:
		#===========================================================================
		#    _                             _ 
		#   (_) ___  _   _ _ __   __ _  __| |
		#   | |/ _ \\| | | | '_ \\ / _` |/ _` |
		#   | | (_) | |_| | |_) | (_| | (_| |
		#  _/ |\\___/ \\__, | .__/ \\__,_|\\__,_|
		# |__/       |___/|_|       		
		# TODO:
		
		print(\"not implemented yet\")
		
	## debug stuff
	get_node(\"debug_hud\").text = \"APPROOT_fps_cam_local_y_angle = \" + str(APPROOT_fps_cam_local_y_angle) + \"\\n\" + \"APPROOT_fps_cam_local_x_angle = \" + str(APPROOT_fps_cam_local_x_angle); 
	get_node(\"in_game_view\").update_camera_rotation(APPROOT_fps_cam_local_y_angle, APPROOT_fps_cam_local_x_angle);
	return;
"

[sub_resource type="GDScript" id=2]
script/source = "extends Spatial


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	#size = get_parent().get_viewport().size;
	
	#print(self.size)
	pass # Replace with function body.

#--------------------------------------------------------------------

func update_camera_rotation(y_angle, x_angle):
	get_node(\"Camera\").rotation = Vector3.ZERO;
	get_node(\"Camera\").rotate_y(y_angle);
	get_node(\"Camera\").rotate_object_local(Vector3(1,0,0),x_angle);
	return;
	
#--------------------------------------------------------------------


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="Environment" id=3]

[node name="application_root" type="Node2D"]
script = SubResource( 1 )

[node name="in_game_view" type="Spatial" parent="."]
script = SubResource( 2 )

[node name="Camera" type="Camera" parent="in_game_view"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="in_game_view"]
environment = SubResource( 3 )

[node name="test_room" parent="in_game_view" instance=ExtResource( 1 )]

[node name="debug_hud" type="RichTextLabel" parent="."]
margin_left = 91.1117
margin_top = 66.5559
margin_right = 736.112
margin_bottom = 277.556
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}
