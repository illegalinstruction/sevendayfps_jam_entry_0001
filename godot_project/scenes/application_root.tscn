[gd_scene load_steps=7 format=2]

[ext_resource path="res://test-stuff/test_room_2.tscn" type="PackedScene" id=1]
[ext_resource path="res://test-stuff/cinecaption226.ttf" type="DynamicFontData" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

#------------ GLOBALS ----------------------------------------------------------

# states a key/button can be in
const KEY_STATES = {
	\"IDLE\"		:	0,
	\"PRESSED\"	:	1,
	\"HELD\"		:	2
}

const MAX_TO_LOOK_UP_OR_DOWN : float 	= (60.0 * PI / 180.0);
const UP_AND_DOWN_FUDGE : float 		= 0.85;

var APPROOT_fps_cam_mouse_sensitivity : float;

var APPROOT_fps_cam_local_y_angle : float; # in radians
var APPROOT_fps_cam_local_x_angle : float; # in radians

var APPROOT_key_fwd 	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_back 	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_left	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_right 	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_jump 	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_use 	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_inv 	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_weap_up	: int = KEY_STATES[\"IDLE\"];
var APPROOT_key_weap_dn	: int = KEY_STATES[\"IDLE\"];

var APPROOT_key_fwd_mapping 	: int = KEY_W;
var APPROOT_key_back_mapping 	: int = KEY_S;
var APPROOT_key_left_mapping	: int = KEY_A;
var APPROOT_key_right_mapping 	: int = KEY_D;
var APPROOT_key_jump_mapping 	: int = KEY_SPACE;
var APPROOT_key_use_mapping 	: int = KEY_E;
var APPROOT_key_inv_mapping 	: int = KEY_Q;
var APPROOT_key_weap_up_mapping	: int = KEY_1;
var APPROOT_key_weap_dn_mapping	: int = KEY_3;

# probably not going to get to this before the jam ends
var APPROOT_using_joypad : bool;

var APPROOT_viewport_middle : Vector2;


#-------------------------------------------------------------------------------


# Called when the node enters the scene tree for the first time.
func _ready():
	APPROOT_fps_cam_local_y_angle 		= 0;
	APPROOT_fps_cam_local_x_angle 		= 0;
	APPROOT_fps_cam_mouse_sensitivity	= 0.00125;
	APPROOT_using_joypad				= false;
	set_process(true);
	Input.set_mouse_mode(Input.MOUSE_MODE_CONFINED);
	
	APPROOT_viewport_middle.x = get_viewport().size.x / 2.0;
	APPROOT_viewport_middle.y = get_viewport().size.y / 2.0;
	get_viewport().warp_mouse(APPROOT_viewport_middle);
	
	return;

#-------------------------------------------------------------------------------


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	# exit on ESC
	if (Input.is_key_pressed(KEY_ESCAPE)):
		get_tree().quit();
		
	gather_input();
		
	## debug stuff
	get_node(\"debug_hud\").text = \"APPROOT_fps_cam_local_y_angle = \" + str(APPROOT_fps_cam_local_y_angle) + \"\\n\" + \"APPROOT_fps_cam_local_x_angle = \" + str(APPROOT_fps_cam_local_x_angle); 
	get_node(\"in_game_view\").update_movement(
									APPROOT_key_fwd,
									APPROOT_key_back,
									APPROOT_key_left,
									APPROOT_key_right,
									APPROOT_fps_cam_local_y_angle, 
									APPROOT_fps_cam_local_x_angle);
	return;

#-------------------------------------------------------------------------------

func gather_input():
	if not (APPROOT_using_joypad):	
		#===========================================================================
		#  _ __ ___   ___  _   _ ___  ___ 
		# | '_ ` _ \\ / _ \\| | | / __|/ _ \\
		# | | | | | | (_) | |_| \\__ \\  __/
		# |_| |_| |_|\\___/ \\__,_|___/\\___|
		# TODO: break out into its own method
			
		# get last mouse move
		var curr_mouse_pos : Vector2 = get_viewport().get_mouse_position();
		
		# update our camera angles
		# looking up and down
		APPROOT_fps_cam_local_x_angle += (curr_mouse_pos.y - APPROOT_viewport_middle.y) * APPROOT_fps_cam_mouse_sensitivity * UP_AND_DOWN_FUDGE;
		
		# range checking - don't let player look straight up or down
		if (APPROOT_fps_cam_local_x_angle < -MAX_TO_LOOK_UP_OR_DOWN):
			APPROOT_fps_cam_local_x_angle = -MAX_TO_LOOK_UP_OR_DOWN;

		if (APPROOT_fps_cam_local_x_angle > MAX_TO_LOOK_UP_OR_DOWN):
			APPROOT_fps_cam_local_x_angle = MAX_TO_LOOK_UP_OR_DOWN;
		
		# looking left and right
		APPROOT_fps_cam_local_y_angle += (curr_mouse_pos.x - APPROOT_viewport_middle.x) * APPROOT_fps_cam_mouse_sensitivity;
		APPROOT_fps_cam_local_y_angle = wrapf(APPROOT_fps_cam_local_y_angle, 0, 2.0 * PI);
		
		# reset mouse pos for next frame	
		get_viewport().warp_mouse(APPROOT_viewport_middle);

		#===========================================================================
		#  _                  
		# | | _____ _   _ ___ 
		# | |/ / _ \\ | | / __|
		# |   <  __/ |_| \\__ \\
		# |_|\\_\\___|\\__, |___/
		#           |___/     
		# 
		
		#-- running forward -------------------------------
		if (Input.is_key_pressed(APPROOT_key_fwd_mapping)):
			if (APPROOT_key_fwd == KEY_STATES[\"IDLE\"]):
				APPROOT_key_fwd = KEY_STATES[\"PRESSED\"];
			else:
				APPROOT_key_fwd = KEY_STATES[\"HELD\"];
		else:
			APPROOT_key_fwd = KEY_STATES[\"IDLE\"];
	
		#-- running backward -------------------------------
		if (Input.is_key_pressed(APPROOT_key_back_mapping)):
			if (APPROOT_key_back == KEY_STATES[\"IDLE\"]):
				APPROOT_key_back = KEY_STATES[\"PRESSED\"];
			else:
				APPROOT_key_back = KEY_STATES[\"HELD\"];
		else:
			APPROOT_key_back = KEY_STATES[\"IDLE\"];

		#-- running left -------------------------------
		if (Input.is_key_pressed(APPROOT_key_left_mapping)):
			if (APPROOT_key_left == KEY_STATES[\"IDLE\"]):
				APPROOT_key_left = KEY_STATES[\"PRESSED\"];
			else:
				APPROOT_key_left = KEY_STATES[\"HELD\"];
		else:
			APPROOT_key_left = KEY_STATES[\"IDLE\"];

		#-- running right -------------------------------
		if (Input.is_key_pressed(APPROOT_key_right_mapping)):
			if (APPROOT_key_right == KEY_STATES[\"IDLE\"]):
				APPROOT_key_right = KEY_STATES[\"PRESSED\"];
			else:
				APPROOT_key_right = KEY_STATES[\"HELD\"];
		else:
			APPROOT_key_right = KEY_STATES[\"IDLE\"];
	
		#-- jumping ------------------------------------
		if (Input.is_key_pressed(APPROOT_key_jump_mapping)):
			if (APPROOT_key_jump == KEY_STATES[\"IDLE\"]):
				APPROOT_key_jump = KEY_STATES[\"PRESSED\"];
			else:
				APPROOT_key_jump = KEY_STATES[\"HELD\"];
		else:
			APPROOT_key_jump = KEY_STATES[\"IDLE\"];
	
		#-- use/interact -------------------------------
		if (Input.is_key_pressed(APPROOT_key_use_mapping)):
			if (APPROOT_key_use == KEY_STATES[\"IDLE\"]):
				APPROOT_key_use = KEY_STATES[\"PRESSED\"];
			else:
				APPROOT_key_use = KEY_STATES[\"HELD\"];
		else:
			APPROOT_key_use = KEY_STATES[\"IDLE\"];

		#-- inventory menu ------------------------------
		if (Input.is_key_pressed(APPROOT_key_inv_mapping)):
			if (APPROOT_key_inv == KEY_STATES[\"IDLE\"]):
				APPROOT_key_inv = KEY_STATES[\"PRESSED\"];
			else:
				APPROOT_key_inv = KEY_STATES[\"HELD\"];
		else:
			APPROOT_key_inv = KEY_STATES[\"IDLE\"];
		
	else:
		#===========================================================================
		#    _                             _ 
		#   (_) ___  _   _ _ __   __ _  __| |
		#   | |/ _ \\| | | | '_ \\ / _` |/ _` |
		#   | | (_) | |_| | |_) | (_| | (_| |
		#  _/ |\\___/ \\__, | .__/ \\__,_|\\__,_|
		# |__/       |___/|_|       		
		# TODO:
		
		print(\"not implemented yet\")	
"

[sub_resource type="GDScript" id=2]
script/source = "extends Spatial

const KEY_STATES = {
	\"IDLE\"		:	0,
	\"PRESSED\"	:	1,
	\"HELD\"		:	2
}

const MAX_RUN_SPEED			: float = 0.1275;
const RUN_SPEED_ADD 		: float = 0.0125;
const RUN_SPEED_ATTENUATE 	: float = 0.9;

#--------------------------------------------------------------------

class PLAYER: 
	var pos 	: Vector3;
	var veloc 	: Vector3;
	var y_rot 	: float;
	var x_rot	: float;

#--------------------------------------------------------------------

var test_player : PLAYER;

# Called when the node enters the scene tree for the first time.
func _ready():
	test_player = PLAYER.new();
	test_player.pos 	= Vector3.ZERO;
	test_player.veloc	= Vector3.ZERO;
	test_player.x_rot	= 0;
	test_player.y_rot	= 0;
	set_process(true);
	
#--------------------------------------------------------------------

func _process(delta):
	update_camera();	

#--------------------------------------------------------------------

func update_movement(fwd, back, left, right, y_angle, x_angle):
	test_player.x_rot = x_angle;
	test_player.y_rot = y_angle;
	
	var x_component : float;
	var z_component : float;
	
	if (sqrt(test_player.veloc.x*test_player.veloc.x+test_player.veloc.z*test_player.veloc.z) < MAX_RUN_SPEED):
		if (fwd != KEY_STATES[\"IDLE\"]):
			x_component = -sin(test_player.y_rot) * RUN_SPEED_ADD;
			z_component = -cos(test_player.y_rot) * RUN_SPEED_ADD;
			
			test_player.veloc.x += x_component;
			test_player.veloc.z += z_component;

		if (back != KEY_STATES[\"IDLE\"]):
			x_component =  sin(test_player.y_rot) * RUN_SPEED_ADD;
			z_component =  cos(test_player.y_rot) * RUN_SPEED_ADD;
			
			test_player.veloc.x += x_component;
			test_player.veloc.z += z_component;

		if (left != KEY_STATES[\"IDLE\"]):
			x_component = -cos(test_player.y_rot) * RUN_SPEED_ADD;
			z_component =  sin(test_player.y_rot) * RUN_SPEED_ADD;
			
			test_player.veloc.x += x_component;
			test_player.veloc.z += z_component;

		if (right != KEY_STATES[\"IDLE\"]):
			x_component =  cos(test_player.y_rot) * RUN_SPEED_ADD;
			z_component = -sin(test_player.y_rot) * RUN_SPEED_ADD;
			
			test_player.veloc.x += x_component;
			test_player.veloc.z += z_component;
		
		
		
	test_player.veloc.x = test_player.veloc.x * RUN_SPEED_ATTENUATE;
	test_player.veloc.z = test_player.veloc.z * RUN_SPEED_ATTENUATE;
	
	# actually move
	test_player.pos += test_player.veloc;
	
	if (test_player.pos.x < -8):
		test_player.pos.x = -8;
	if (test_player.pos.x > 8):
		test_player.pos.x = 8;
	if (test_player.pos.z < -8):
		test_player.pos.z = -8;
	if (test_player.pos.z > 8):
		test_player.pos.z = 8;

#--------------------------------------------------------------------

func update_camera():
	# make sure we're starting with no transforms 
	get_node(\"Camera\").translation 		= Vector3.ZERO
	get_node(\"Camera\").rotation 		= Vector3.ZERO;
	
	get_node(\"Camera\").translation = test_player.pos;
	
	get_node(\"Camera\").rotate_y(test_player.y_rot);
	get_node(\"Camera\").rotate_object_local(Vector3(1,0,0),test_player.x_rot);
	return;
	
#--------------------------------------------------------------------


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="Environment" id=3]
ambient_light_color = Color( 0.780392, 0.631373, 0.454902, 1 )

[sub_resource type="DynamicFont" id=4]
size = 34
outline_size = 2
outline_color = Color( 0.148438, 0.0656586, 0.0469666, 1 )
use_filter = true
font_data = ExtResource( 2 )

[node name="application_root" type="Node2D"]
script = SubResource( 1 )

[node name="in_game_view" type="Spatial" parent="."]
script = SubResource( 2 )

[node name="Camera" type="Camera" parent="in_game_view"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="in_game_view"]
environment = SubResource( 3 )

[node name="test_room_2" parent="in_game_view" instance=ExtResource( 1 )]

[node name="debug_hud" type="RichTextLabel" parent="."]
margin_left = 91.0
margin_top = 67.0
margin_right = 1009.0
margin_bottom = 278.0
custom_fonts/normal_font = SubResource( 4 )
custom_colors/default_color = Color( 0.7448, 0.93688, 0.98, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_offset_x = 2
custom_constants/shadow_offset_y = 2
__meta__ = {
"_edit_use_anchors_": false
}
